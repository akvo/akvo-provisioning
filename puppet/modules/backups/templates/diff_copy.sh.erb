#!/bin/bash

# ======
# CONFIG
# ======

HOST=<%= @remote_host %>
PORT=<%= @port %>
USER=<%= @username %>
SOURCE_DIR=$1
PERIOD=$2
RETAIN_COUNT=$3
NAME=$4
BASE_DEST_DIR=<%= @dest_dir %>/<%= @environment %>/<%= @hostname %>/$NAME
SSH_COMMAND="ssh -p $PORT -i /backups/ssh/backup_key"


# ==========
# VALIDATION
# ==========

if [[ -z $SOURCE_DIR ]] || [[ -z $PERIOD ]] || [[ -z $RETAIN_COUNT ]] || [[ -z $NAME ]]
then
    echo "Usage: backup_to_<%=@name%>.sh source period retain_count name"
    exit 1
fi


# ====
# EXEC
# ====

echo "Backing up $SOURCE_DIR to <%=@name%>"

function on_remote {
    CMD=$@
<% if @use_sftp %>
    lftp -u $USER,nothing sftp://$HOST -e "set sftp:connect-program $SSH_COMMAND; $CMD; quit"
<% else %>
    $SSH_COMMAND $USER@$HOST $CMD
<% end %>
}

# first clean up the old dirs
on_remote rm -rf $BASE_DEST_DIR/$PERIOD/$RETAIN_COUNT

for i in $(seq $RETAIN_COUNT -1 1)
do
    PREV=`expr $i - 1`
    on_remote mv $BASE_DEST_DIR/$PERIOD/$PREV $BASE_DEST_DIR/$PERIOD/$i
done

# hardlink to old files if possible
if [ "$?" -eq "1" ]
then
    # this means that the previous 'mv' failed, ie, there is no current backup
    # to link to
    LINK_DEST=''
else
    LINK_DEST="--link-dest=../1"
fi

# Now copy!
DEST_DIR=$BASE_DEST_DIR/$PERIOD/0

on_remote mkdir -p $DEST_DIR
on_remote rm -f $BASE_DEST_DIR/$PERIOD/current
on_remote ln -s $DEST_DIR $BASE_DEST_DIR/$PERIOD/current

rsync --verbose --archive --delete ${LINK_DEST} --rsh "${SSH_COMMAND}" $SOURCE_DIR $USER@$HOST:$DEST_DIR/